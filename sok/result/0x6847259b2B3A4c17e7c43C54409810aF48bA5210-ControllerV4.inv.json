[
    {
        "func": "approveJarConverter(_converter)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "ori(devfund) != 0",
            "ori(governance) != 0",
            "msg.sender != 0",
            "msg.value == 0",
            "msg.value one of [0]",
            "ori(treasury) != 0",
            "ori(timelock) != 0",
            "ori(convenienceFee) > 0",
            "ori(convenienceFee) == 100",
            "ori(convenienceFee) one of [100]",
            "ori(approvedJarConverters[_converter]) == false",
            "ori(onesplit) != 0",
            "_converter != 0",
            "ori(strategist) != 0",
            "ori(split) > 0",
            "ori(split) == 500",
            "ori(split) one of [500]",
            "ori(devfund) != ori(governance)",
            "ori(devfund) != msg.sender",
            "ori(devfund) != ori(treasury)",
            "ori(devfund) != ori(timelock)",
            "ori(devfund) != ori(onesplit)",
            "ori(devfund) != _converter",
            "ori(devfund) != ori(strategist)",
            "ori(governance) == msg.sender",
            "ori(governance) != ori(treasury)",
            "ori(governance) == ori(timelock)",
            "ori(governance) != ori(onesplit)",
            "ori(governance) != _converter",
            "ori(governance) != ori(strategist)",
            "msg.sender != ori(treasury)",
            "msg.sender == ori(timelock)",
            "msg.sender != ori(onesplit)",
            "msg.sender != _converter",
            "msg.sender != ori(strategist)",
            "msg.value <= ori(convenienceFee)",
            "msg.value < ori(convenienceFee)",
            "msg.value != ori(convenienceFee)",
            "msg.value <= ori(split)",
            "msg.value < ori(split)",
            "msg.value != ori(split)",
            "ori(treasury) != ori(timelock)",
            "ori(treasury) != ori(onesplit)",
            "ori(treasury) != _converter",
            "ori(treasury) != ori(strategist)",
            "ori(timelock) != ori(onesplit)",
            "ori(timelock) != _converter",
            "ori(timelock) != ori(strategist)",
            "ori(convenienceFee) <= ori(split)",
            "ori(convenienceFee) < ori(split)",
            "ori(convenienceFee) != ori(split)",
            "ori(onesplit) != _converter",
            "ori(onesplit) != ori(strategist)",
            "_converter != ori(strategist)"
        ],
        "postconditions": [
            "onesplit != 0",
            "devfund != 0",
            "approvedJarConverters[_converter] == true",
            "strategist != 0",
            "convenienceFee > 0",
            "convenienceFee == 100",
            "convenienceFee one of [100]",
            "split > 0",
            "split == 500",
            "split one of [500]",
            "timelock != 0",
            "governance != 0",
            "treasury != 0",
            "onesplit != ori(devfund)",
            "onesplit != devfund",
            "onesplit != ori(governance)",
            "onesplit != msg.sender",
            "onesplit != ori(treasury)",
            "onesplit != ori(timelock)",
            "onesplit != strategist",
            "onesplit == ori(onesplit)",
            "onesplit != timelock",
            "onesplit != _converter",
            "onesplit != governance",
            "onesplit != treasury",
            "onesplit != ori(strategist)",
            "ori(devfund) == devfund",
            "ori(devfund) != strategist",
            "ori(devfund) != timelock",
            "ori(devfund) != governance",
            "ori(devfund) != treasury",
            "devfund != ori(governance)",
            "devfund != msg.sender",
            "devfund != ori(treasury)",
            "devfund != ori(timelock)",
            "devfund != strategist",
            "devfund != ori(onesplit)",
            "devfund != timelock",
            "devfund != _converter",
            "devfund != governance",
            "devfund != treasury",
            "devfund != ori(strategist)",
            "approvedJarConverters[_converter] != ori(approvedJarConverters[_converter])",
            "ori(governance) != strategist",
            "ori(governance) == timelock",
            "ori(governance) == governance",
            "ori(governance) != treasury",
            "msg.sender != strategist",
            "msg.sender == timelock",
            "msg.sender == governance",
            "msg.sender != treasury",
            "msg.value <= convenienceFee",
            "msg.value < convenienceFee",
            "msg.value != convenienceFee",
            "msg.value <= split",
            "msg.value < split",
            "msg.value != split",
            "ori(treasury) != strategist",
            "ori(treasury) != timelock",
            "ori(treasury) != governance",
            "ori(treasury) == treasury",
            "ori(timelock) != strategist",
            "ori(timelock) == timelock",
            "ori(timelock) == governance",
            "ori(timelock) != treasury",
            "ori(convenienceFee) == convenienceFee",
            "ori(convenienceFee) >= convenienceFee",
            "ori(convenienceFee) <= convenienceFee",
            "ori(convenienceFee) <= split",
            "ori(convenienceFee) < split",
            "ori(convenienceFee) != split",
            "strategist != ori(onesplit)",
            "strategist != timelock",
            "strategist != _converter",
            "strategist != governance",
            "strategist != treasury",
            "strategist == ori(strategist)",
            "convenienceFee <= split",
            "convenienceFee < split",
            "convenienceFee != split",
            "convenienceFee <= ori(split)",
            "convenienceFee < ori(split)",
            "convenienceFee != ori(split)",
            "ori(onesplit) != timelock",
            "ori(onesplit) != governance",
            "ori(onesplit) != treasury",
            "split == ori(split)",
            "split >= ori(split)",
            "split <= ori(split)",
            "timelock != _converter",
            "timelock == governance",
            "timelock != treasury",
            "timelock != ori(strategist)",
            "_converter != governance",
            "_converter != treasury",
            "governance != treasury",
            "governance != ori(strategist)",
            "treasury != ori(strategist)"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "approveJarConverter(_converter)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "approveStrategy(_token,_strategy)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "ori(devfund) != 0",
            "ori(governance) != 0",
            "msg.sender != 0",
            "msg.value == 0",
            "msg.value one of [0]",
            "ori(treasury) != 0",
            "ori(timelock) != 0",
            "ori(convenienceFee) > 0",
            "ori(convenienceFee) == 100",
            "ori(convenienceFee) one of [100]",
            "ori(approvedStrategies[_token][_strategy]) == false",
            "_strategy != 0",
            "ori(onesplit) != 0",
            "ori(strategist) != 0",
            "_token != 0",
            "ori(split) > 0",
            "ori(split) == 500",
            "ori(split) one of [500]",
            "ori(devfund) != msg.sender",
            "ori(devfund) != ori(treasury)",
            "ori(devfund) != ori(timelock)",
            "ori(devfund) != _strategy",
            "ori(devfund) != ori(onesplit)",
            "ori(devfund) != ori(strategist)",
            "ori(devfund) != _token",
            "ori(governance) != ori(treasury)",
            "ori(governance) != _strategy",
            "ori(governance) != ori(onesplit)",
            "ori(governance) != ori(strategist)",
            "ori(governance) != _token",
            "msg.sender != ori(treasury)",
            "msg.sender == ori(timelock)",
            "msg.sender != _strategy",
            "msg.sender != ori(onesplit)",
            "msg.sender != ori(strategist)",
            "msg.sender != _token",
            "msg.value <= ori(convenienceFee)",
            "msg.value < ori(convenienceFee)",
            "msg.value != ori(convenienceFee)",
            "msg.value <= ori(split)",
            "msg.value < ori(split)",
            "msg.value != ori(split)",
            "ori(treasury) != ori(timelock)",
            "ori(treasury) != _strategy",
            "ori(treasury) != ori(onesplit)",
            "ori(treasury) != ori(strategist)",
            "ori(treasury) != _token",
            "ori(timelock) != _strategy",
            "ori(timelock) != ori(onesplit)",
            "ori(timelock) != ori(strategist)",
            "ori(timelock) != _token",
            "ori(convenienceFee) <= ori(split)",
            "ori(convenienceFee) < ori(split)",
            "ori(convenienceFee) != ori(split)",
            "_strategy != ori(onesplit)",
            "_strategy != ori(strategist)",
            "_strategy != _token",
            "ori(onesplit) != ori(strategist)",
            "ori(onesplit) != _token",
            "ori(strategist) != _token"
        ],
        "postconditions": [
            "onesplit != 0",
            "devfund != 0",
            "strategist != 0",
            "convenienceFee > 0",
            "convenienceFee == 100",
            "convenienceFee one of [100]",
            "split > 0",
            "split == 500",
            "split one of [500]",
            "timelock != 0",
            "governance != 0",
            "treasury != 0",
            "approvedStrategies[_token][_strategy] == true",
            "onesplit != ori(devfund)",
            "onesplit != devfund",
            "onesplit != ori(governance)",
            "onesplit != msg.sender",
            "onesplit != ori(treasury)",
            "onesplit != ori(timelock)",
            "onesplit != _strategy",
            "onesplit != strategist",
            "onesplit == ori(onesplit)",
            "onesplit != timelock",
            "onesplit != governance",
            "onesplit != treasury",
            "onesplit != ori(strategist)",
            "onesplit != _token",
            "ori(devfund) == devfund",
            "ori(devfund) != strategist",
            "ori(devfund) != timelock",
            "ori(devfund) != treasury",
            "devfund != msg.sender",
            "devfund != ori(treasury)",
            "devfund != ori(timelock)",
            "devfund != _strategy",
            "devfund != strategist",
            "devfund != ori(onesplit)",
            "devfund != timelock",
            "devfund != treasury",
            "devfund != ori(strategist)",
            "devfund != _token",
            "ori(governance) != strategist",
            "ori(governance) == governance",
            "ori(governance) != treasury",
            "msg.sender != strategist",
            "msg.sender == timelock",
            "msg.sender != treasury",
            "msg.value <= convenienceFee",
            "msg.value < convenienceFee",
            "msg.value != convenienceFee",
            "msg.value <= split",
            "msg.value < split",
            "msg.value != split",
            "ori(treasury) != strategist",
            "ori(treasury) != timelock",
            "ori(treasury) != governance",
            "ori(treasury) == treasury",
            "ori(timelock) != strategist",
            "ori(timelock) == timelock",
            "ori(timelock) != treasury",
            "ori(convenienceFee) == convenienceFee",
            "ori(convenienceFee) >= convenienceFee",
            "ori(convenienceFee) <= convenienceFee",
            "ori(convenienceFee) <= split",
            "ori(convenienceFee) < split",
            "ori(convenienceFee) != split",
            "ori(approvedStrategies[_token][_strategy]) != approvedStrategies[_token][_strategy]",
            "_strategy != strategist",
            "_strategy != timelock",
            "_strategy != governance",
            "_strategy != treasury",
            "strategist != ori(onesplit)",
            "strategist != timelock",
            "strategist != governance",
            "strategist != treasury",
            "strategist == ori(strategist)",
            "strategist != _token",
            "convenienceFee <= split",
            "convenienceFee < split",
            "convenienceFee != split",
            "convenienceFee <= ori(split)",
            "convenienceFee < ori(split)",
            "convenienceFee != ori(split)",
            "ori(onesplit) != timelock",
            "ori(onesplit) != governance",
            "ori(onesplit) != treasury",
            "split == ori(split)",
            "split >= ori(split)",
            "split <= ori(split)",
            "timelock != treasury",
            "timelock != ori(strategist)",
            "timelock != _token",
            "governance != treasury",
            "governance != ori(strategist)",
            "governance != _token",
            "treasury != ori(strategist)",
            "treasury != _token"
        ],
        "falsified_preconditions": [
            "ori(devfund) != ori(governance)",
            "ori(governance) == msg.sender",
            "ori(governance) == ori(timelock)"
        ],
        "falsified_postconditions": [
            "ori(devfund) != governance",
            "devfund != ori(governance)",
            "devfund != governance",
            "ori(governance) == timelock",
            "msg.sender == governance",
            "ori(timelock) == governance",
            "timelock == governance"
        ]
    },
    {
        "func": "approveStrategy(_token,_strategy)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "earn(_token,_amount)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "earn(_token,_amount)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "inCaseStrategyTokenGetStuck(_strategy,_token)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "inCaseStrategyTokenGetStuck(_strategy,_token)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "inCaseTokensGetStuck(_token,_amount)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "inCaseTokensGetStuck(_token,_amount)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "revokeJarConverter(_converter)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "revokeJarConverter(_converter)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "revokeStrategy(_token,_strategy)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "revokeStrategy(_token,_strategy)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setConvenienceFee(_convenienceFee)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setConvenienceFee(_convenienceFee)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setDevFund(_devfund)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setDevFund(_devfund)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setGovernance(_governance)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "ori(devfund) != 0",
            "ori(governance) != 0",
            "msg.sender != 0",
            "msg.value == 0",
            "msg.value one of [0]",
            "ori(treasury) != 0",
            "ori(timelock) != 0",
            "ori(convenienceFee) > 0",
            "ori(convenienceFee) == 100",
            "ori(convenienceFee) one of [100]",
            "_governance != 0",
            "ori(onesplit) != 0",
            "ori(strategist) != 0",
            "ori(split) > 0",
            "ori(split) == 500",
            "ori(split) one of [500]",
            "ori(devfund) != ori(governance)",
            "ori(devfund) != msg.sender",
            "ori(devfund) != ori(treasury)",
            "ori(devfund) != ori(timelock)",
            "ori(devfund) == _governance",
            "ori(devfund) != ori(onesplit)",
            "ori(devfund) != ori(strategist)",
            "ori(governance) == msg.sender",
            "ori(governance) != ori(treasury)",
            "ori(governance) == ori(timelock)",
            "ori(governance) != _governance",
            "ori(governance) != ori(onesplit)",
            "ori(governance) != ori(strategist)",
            "msg.sender != ori(treasury)",
            "msg.sender == ori(timelock)",
            "msg.sender != _governance",
            "msg.sender != ori(onesplit)",
            "msg.sender != ori(strategist)",
            "msg.value <= ori(convenienceFee)",
            "msg.value < ori(convenienceFee)",
            "msg.value != ori(convenienceFee)",
            "msg.value <= ori(split)",
            "msg.value < ori(split)",
            "msg.value != ori(split)",
            "ori(treasury) != ori(timelock)",
            "ori(treasury) != _governance",
            "ori(treasury) != ori(onesplit)",
            "ori(treasury) != ori(strategist)",
            "ori(timelock) != _governance",
            "ori(timelock) != ori(onesplit)",
            "ori(timelock) != ori(strategist)",
            "ori(convenienceFee) <= ori(split)",
            "ori(convenienceFee) < ori(split)",
            "ori(convenienceFee) != ori(split)",
            "_governance != ori(onesplit)",
            "_governance != ori(strategist)",
            "ori(onesplit) != ori(strategist)"
        ],
        "postconditions": [
            "onesplit != 0",
            "devfund != 0",
            "strategist != 0",
            "convenienceFee > 0",
            "convenienceFee == 100",
            "convenienceFee one of [100]",
            "split > 0",
            "split == 500",
            "split one of [500]",
            "timelock != 0",
            "governance != 0",
            "treasury != 0",
            "onesplit != ori(devfund)",
            "onesplit != devfund",
            "onesplit != ori(governance)",
            "onesplit != msg.sender",
            "onesplit != ori(treasury)",
            "onesplit != ori(timelock)",
            "onesplit != strategist",
            "onesplit != _governance",
            "onesplit == ori(onesplit)",
            "onesplit != timelock",
            "onesplit != governance",
            "onesplit != treasury",
            "onesplit != ori(strategist)",
            "ori(devfund) == devfund",
            "ori(devfund) != strategist",
            "ori(devfund) != timelock",
            "ori(devfund) == governance",
            "ori(devfund) != treasury",
            "devfund != ori(governance)",
            "devfund != msg.sender",
            "devfund != ori(treasury)",
            "devfund != ori(timelock)",
            "devfund != strategist",
            "devfund == _governance",
            "devfund != ori(onesplit)",
            "devfund != timelock",
            "devfund == governance",
            "devfund != treasury",
            "devfund != ori(strategist)",
            "ori(governance) != strategist",
            "ori(governance) == timelock",
            "ori(governance) != governance",
            "ori(governance) != treasury",
            "msg.sender != strategist",
            "msg.sender == timelock",
            "msg.sender != governance",
            "msg.sender != treasury",
            "msg.value <= convenienceFee",
            "msg.value < convenienceFee",
            "msg.value != convenienceFee",
            "msg.value <= split",
            "msg.value < split",
            "msg.value != split",
            "ori(treasury) != strategist",
            "ori(treasury) != timelock",
            "ori(treasury) != governance",
            "ori(treasury) == treasury",
            "ori(timelock) != strategist",
            "ori(timelock) == timelock",
            "ori(timelock) != governance",
            "ori(timelock) != treasury",
            "ori(convenienceFee) == convenienceFee",
            "ori(convenienceFee) >= convenienceFee",
            "ori(convenienceFee) <= convenienceFee",
            "ori(convenienceFee) <= split",
            "ori(convenienceFee) < split",
            "ori(convenienceFee) != split",
            "strategist != _governance",
            "strategist != ori(onesplit)",
            "strategist != timelock",
            "strategist != governance",
            "strategist != treasury",
            "strategist == ori(strategist)",
            "_governance != timelock",
            "_governance == governance",
            "_governance != treasury",
            "convenienceFee <= split",
            "convenienceFee < split",
            "convenienceFee != split",
            "convenienceFee <= ori(split)",
            "convenienceFee < ori(split)",
            "convenienceFee != ori(split)",
            "ori(onesplit) != timelock",
            "ori(onesplit) != governance",
            "ori(onesplit) != treasury",
            "split == ori(split)",
            "split >= ori(split)",
            "split <= ori(split)",
            "timelock != governance",
            "timelock != treasury",
            "timelock != ori(strategist)",
            "governance != treasury",
            "governance != ori(strategist)",
            "treasury != ori(strategist)"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setGovernance(_governance)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setJar(_token,_jar)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "ori(devfund) != 0",
            "ori(governance) != 0",
            "msg.sender != 0",
            "msg.value == 0",
            "msg.value one of [0]",
            "ori(treasury) != 0",
            "ori(timelock) != 0",
            "ori(convenienceFee) > 0",
            "ori(convenienceFee) == 100",
            "ori(convenienceFee) one of [100]",
            "ori(onesplit) != 0",
            "_jar != 0",
            "ori(jars[_token]) == 0",
            "ori(strategist) != 0",
            "_token != 0",
            "ori(split) > 0",
            "ori(split) == 500",
            "ori(split) one of [500]",
            "ori(devfund) != ori(governance)",
            "ori(devfund) != msg.sender",
            "ori(devfund) != ori(treasury)",
            "ori(devfund) != ori(timelock)",
            "ori(devfund) != ori(onesplit)",
            "ori(devfund) != _jar",
            "ori(devfund) != ori(jars[_token])",
            "ori(devfund) != ori(strategist)",
            "ori(devfund) != _token",
            "ori(governance) == msg.sender",
            "ori(governance) != ori(treasury)",
            "ori(governance) == ori(timelock)",
            "ori(governance) != ori(onesplit)",
            "ori(governance) != _jar",
            "ori(governance) != ori(jars[_token])",
            "ori(governance) != ori(strategist)",
            "ori(governance) != _token",
            "msg.sender != ori(treasury)",
            "msg.sender == ori(timelock)",
            "msg.sender != ori(onesplit)",
            "msg.sender != _jar",
            "msg.sender != ori(jars[_token])",
            "msg.sender != ori(strategist)",
            "msg.sender != _token",
            "msg.value <= ori(convenienceFee)",
            "msg.value < ori(convenienceFee)",
            "msg.value != ori(convenienceFee)",
            "msg.value <= ori(split)",
            "msg.value < ori(split)",
            "msg.value != ori(split)",
            "ori(treasury) != ori(timelock)",
            "ori(treasury) != ori(onesplit)",
            "ori(treasury) != _jar",
            "ori(treasury) != ori(jars[_token])",
            "ori(treasury) != ori(strategist)",
            "ori(treasury) != _token",
            "ori(timelock) != ori(onesplit)",
            "ori(timelock) != _jar",
            "ori(timelock) != ori(jars[_token])",
            "ori(timelock) != ori(strategist)",
            "ori(timelock) != _token",
            "ori(convenienceFee) <= ori(split)",
            "ori(convenienceFee) < ori(split)",
            "ori(convenienceFee) != ori(split)",
            "ori(onesplit) != _jar",
            "ori(onesplit) != ori(jars[_token])",
            "ori(onesplit) != ori(strategist)",
            "ori(onesplit) != _token",
            "_jar != ori(jars[_token])",
            "_jar != ori(strategist)",
            "_jar != _token",
            "ori(jars[_token]) != ori(strategist)",
            "ori(jars[_token]) != _token",
            "ori(strategist) != _token"
        ],
        "postconditions": [
            "onesplit != 0",
            "devfund != 0",
            "strategist != 0",
            "convenienceFee > 0",
            "convenienceFee == 100",
            "convenienceFee one of [100]",
            "split > 0",
            "split == 500",
            "split one of [500]",
            "timelock != 0",
            "governance != 0",
            "jars[_token] != 0",
            "treasury != 0",
            "onesplit != ori(devfund)",
            "onesplit != devfund",
            "onesplit != ori(governance)",
            "onesplit != msg.sender",
            "onesplit != ori(treasury)",
            "onesplit != ori(timelock)",
            "onesplit != strategist",
            "onesplit == ori(onesplit)",
            "onesplit != timelock",
            "onesplit != _jar",
            "onesplit != governance",
            "onesplit != jars[_token]",
            "onesplit != treasury",
            "onesplit != ori(jars[_token])",
            "onesplit != ori(strategist)",
            "onesplit != _token",
            "ori(devfund) == devfund",
            "ori(devfund) != strategist",
            "ori(devfund) != timelock",
            "ori(devfund) != governance",
            "ori(devfund) != jars[_token]",
            "ori(devfund) != treasury",
            "devfund != ori(governance)",
            "devfund != msg.sender",
            "devfund != ori(treasury)",
            "devfund != ori(timelock)",
            "devfund != strategist",
            "devfund != ori(onesplit)",
            "devfund != timelock",
            "devfund != _jar",
            "devfund != governance",
            "devfund != jars[_token]",
            "devfund != treasury",
            "devfund != ori(jars[_token])",
            "devfund != ori(strategist)",
            "devfund != _token",
            "ori(governance) != strategist",
            "ori(governance) == timelock",
            "ori(governance) == governance",
            "ori(governance) != jars[_token]",
            "ori(governance) != treasury",
            "msg.sender != strategist",
            "msg.sender == timelock",
            "msg.sender == governance",
            "msg.sender != jars[_token]",
            "msg.sender != treasury",
            "msg.value <= convenienceFee",
            "msg.value < convenienceFee",
            "msg.value != convenienceFee",
            "msg.value <= split",
            "msg.value < split",
            "msg.value != split",
            "ori(treasury) != strategist",
            "ori(treasury) != timelock",
            "ori(treasury) != governance",
            "ori(treasury) != jars[_token]",
            "ori(treasury) == treasury",
            "ori(timelock) != strategist",
            "ori(timelock) == timelock",
            "ori(timelock) == governance",
            "ori(timelock) != jars[_token]",
            "ori(timelock) != treasury",
            "ori(convenienceFee) == convenienceFee",
            "ori(convenienceFee) >= convenienceFee",
            "ori(convenienceFee) <= convenienceFee",
            "ori(convenienceFee) <= split",
            "ori(convenienceFee) < split",
            "ori(convenienceFee) != split",
            "strategist != ori(onesplit)",
            "strategist != timelock",
            "strategist != _jar",
            "strategist != governance",
            "strategist != jars[_token]",
            "strategist != treasury",
            "strategist != ori(jars[_token])",
            "strategist == ori(strategist)",
            "strategist != _token",
            "convenienceFee <= split",
            "convenienceFee < split",
            "convenienceFee != split",
            "convenienceFee <= ori(split)",
            "convenienceFee < ori(split)",
            "convenienceFee != ori(split)",
            "ori(onesplit) != timelock",
            "ori(onesplit) != governance",
            "ori(onesplit) != jars[_token]",
            "ori(onesplit) != treasury",
            "split == ori(split)",
            "split >= ori(split)",
            "split <= ori(split)",
            "timelock != _jar",
            "timelock == governance",
            "timelock != jars[_token]",
            "timelock != treasury",
            "timelock != ori(jars[_token])",
            "timelock != ori(strategist)",
            "timelock != _token",
            "_jar != governance",
            "_jar == jars[_token]",
            "_jar != treasury",
            "governance != jars[_token]",
            "governance != treasury",
            "governance != ori(jars[_token])",
            "governance != ori(strategist)",
            "governance != _token",
            "jars[_token] != treasury",
            "jars[_token] != ori(jars[_token])",
            "jars[_token] != ori(strategist)",
            "jars[_token] != _token",
            "treasury != ori(jars[_token])",
            "treasury != ori(strategist)",
            "treasury != _token"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setJar(_token,_jar)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setOneSplit(_onesplit)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setOneSplit(_onesplit)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setSplit(_split)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setSplit(_split)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setStrategist(_strategist)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setStrategist(_strategist)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setStrategy(_token,_strategy)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "ori(devfund) != 0",
            "ori(governance) != 0",
            "msg.sender != 0",
            "msg.value == 0",
            "msg.value one of [0]",
            "ori(treasury) != 0",
            "ori(timelock) != 0",
            "ori(convenienceFee) > 0",
            "ori(convenienceFee) == 100",
            "ori(convenienceFee) one of [100]",
            "ori(approvedStrategies[_token][_strategy]) == true",
            "_strategy != 0",
            "ori(onesplit) != 0",
            "ori(strategies[_token]) == 0",
            "ori(strategist) != 0",
            "_token != 0",
            "ori(split) > 0",
            "ori(split) == 500",
            "ori(split) one of [500]",
            "ori(devfund) != ori(governance)",
            "ori(devfund) != msg.sender",
            "ori(devfund) != ori(treasury)",
            "ori(devfund) != ori(timelock)",
            "ori(devfund) != _strategy",
            "ori(devfund) != ori(onesplit)",
            "ori(devfund) != ori(strategies[_token])",
            "ori(devfund) != ori(strategist)",
            "ori(devfund) != _token",
            "ori(governance) == msg.sender",
            "ori(governance) != ori(treasury)",
            "ori(governance) == ori(timelock)",
            "ori(governance) != _strategy",
            "ori(governance) != ori(onesplit)",
            "ori(governance) != ori(strategies[_token])",
            "ori(governance) != ori(strategist)",
            "ori(governance) != _token",
            "msg.sender != ori(treasury)",
            "msg.sender == ori(timelock)",
            "msg.sender != _strategy",
            "msg.sender != ori(onesplit)",
            "msg.sender != ori(strategies[_token])",
            "msg.sender != ori(strategist)",
            "msg.sender != _token",
            "msg.value <= ori(convenienceFee)",
            "msg.value < ori(convenienceFee)",
            "msg.value != ori(convenienceFee)",
            "msg.value <= ori(split)",
            "msg.value < ori(split)",
            "msg.value != ori(split)",
            "ori(treasury) != ori(timelock)",
            "ori(treasury) != _strategy",
            "ori(treasury) != ori(onesplit)",
            "ori(treasury) != ori(strategies[_token])",
            "ori(treasury) != ori(strategist)",
            "ori(treasury) != _token",
            "ori(timelock) != _strategy",
            "ori(timelock) != ori(onesplit)",
            "ori(timelock) != ori(strategies[_token])",
            "ori(timelock) != ori(strategist)",
            "ori(timelock) != _token",
            "ori(convenienceFee) <= ori(split)",
            "ori(convenienceFee) < ori(split)",
            "ori(convenienceFee) != ori(split)",
            "_strategy != ori(onesplit)",
            "_strategy != ori(strategies[_token])",
            "_strategy != ori(strategist)",
            "_strategy != _token",
            "ori(onesplit) != ori(strategies[_token])",
            "ori(onesplit) != ori(strategist)",
            "ori(onesplit) != _token",
            "ori(strategies[_token]) != ori(strategist)",
            "ori(strategies[_token]) != _token",
            "ori(strategist) != _token"
        ],
        "postconditions": [
            "onesplit != 0",
            "devfund != 0",
            "strategist != 0",
            "strategies[_token] != 0",
            "convenienceFee > 0",
            "convenienceFee == 100",
            "convenienceFee one of [100]",
            "split > 0",
            "split == 500",
            "split one of [500]",
            "timelock != 0",
            "governance != 0",
            "treasury != 0",
            "approvedStrategies[_token][_strategy] == true",
            "onesplit != ori(devfund)",
            "onesplit != devfund",
            "onesplit != ori(governance)",
            "onesplit != msg.sender",
            "onesplit != ori(treasury)",
            "onesplit != ori(timelock)",
            "onesplit != _strategy",
            "onesplit != strategist",
            "onesplit != strategies[_token]",
            "onesplit == ori(onesplit)",
            "onesplit != timelock",
            "onesplit != governance",
            "onesplit != treasury",
            "onesplit != ori(strategies[_token])",
            "onesplit != ori(strategist)",
            "onesplit != _token",
            "ori(devfund) == devfund",
            "ori(devfund) != strategist",
            "ori(devfund) != strategies[_token]",
            "ori(devfund) != timelock",
            "ori(devfund) != governance",
            "ori(devfund) != treasury",
            "devfund != ori(governance)",
            "devfund != msg.sender",
            "devfund != ori(treasury)",
            "devfund != ori(timelock)",
            "devfund != _strategy",
            "devfund != strategist",
            "devfund != strategies[_token]",
            "devfund != ori(onesplit)",
            "devfund != timelock",
            "devfund != governance",
            "devfund != treasury",
            "devfund != ori(strategies[_token])",
            "devfund != ori(strategist)",
            "devfund != _token",
            "ori(governance) != strategist",
            "ori(governance) != strategies[_token]",
            "ori(governance) == timelock",
            "ori(governance) == governance",
            "ori(governance) != treasury",
            "msg.sender != strategist",
            "msg.sender != strategies[_token]",
            "msg.sender == timelock",
            "msg.sender == governance",
            "msg.sender != treasury",
            "msg.value <= convenienceFee",
            "msg.value < convenienceFee",
            "msg.value != convenienceFee",
            "msg.value <= split",
            "msg.value < split",
            "msg.value != split",
            "ori(treasury) != strategist",
            "ori(treasury) != strategies[_token]",
            "ori(treasury) != timelock",
            "ori(treasury) != governance",
            "ori(treasury) == treasury",
            "ori(timelock) != strategist",
            "ori(timelock) != strategies[_token]",
            "ori(timelock) == timelock",
            "ori(timelock) == governance",
            "ori(timelock) != treasury",
            "ori(convenienceFee) == convenienceFee",
            "ori(convenienceFee) >= convenienceFee",
            "ori(convenienceFee) <= convenienceFee",
            "ori(convenienceFee) <= split",
            "ori(convenienceFee) < split",
            "ori(convenienceFee) != split",
            "ori(approvedStrategies[_token][_strategy]) == approvedStrategies[_token][_strategy]",
            "_strategy != strategist",
            "_strategy == strategies[_token]",
            "_strategy != timelock",
            "_strategy != governance",
            "_strategy != treasury",
            "strategist != strategies[_token]",
            "strategist != ori(onesplit)",
            "strategist != timelock",
            "strategist != governance",
            "strategist != treasury",
            "strategist != ori(strategies[_token])",
            "strategist == ori(strategist)",
            "strategist != _token",
            "strategies[_token] != ori(onesplit)",
            "strategies[_token] != timelock",
            "strategies[_token] != governance",
            "strategies[_token] != treasury",
            "strategies[_token] != ori(strategies[_token])",
            "strategies[_token] != ori(strategist)",
            "strategies[_token] != _token",
            "convenienceFee <= split",
            "convenienceFee < split",
            "convenienceFee != split",
            "convenienceFee <= ori(split)",
            "convenienceFee < ori(split)",
            "convenienceFee != ori(split)",
            "ori(onesplit) != timelock",
            "ori(onesplit) != governance",
            "ori(onesplit) != treasury",
            "split == ori(split)",
            "split >= ori(split)",
            "split <= ori(split)",
            "timelock == governance",
            "timelock != treasury",
            "timelock != ori(strategies[_token])",
            "timelock != ori(strategist)",
            "timelock != _token",
            "governance != treasury",
            "governance != ori(strategies[_token])",
            "governance != ori(strategist)",
            "governance != _token",
            "treasury != ori(strategies[_token])",
            "treasury != ori(strategist)",
            "treasury != _token"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setStrategy(_token,_strategy)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setTimelock(_timelock)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "ori(devfund) != 0",
            "ori(governance) != 0",
            "msg.sender != 0",
            "msg.value == 0",
            "msg.value one of [0]",
            "ori(treasury) != 0",
            "ori(timelock) != 0",
            "ori(convenienceFee) > 0",
            "ori(convenienceFee) == 100",
            "ori(convenienceFee) one of [100]",
            "_timelock != 0",
            "ori(onesplit) != 0",
            "ori(strategist) != 0",
            "ori(split) > 0",
            "ori(split) == 500",
            "ori(split) one of [500]",
            "ori(devfund) == ori(governance)",
            "ori(devfund) != msg.sender",
            "ori(devfund) != ori(treasury)",
            "ori(devfund) != ori(timelock)",
            "ori(devfund) != _timelock",
            "ori(devfund) != ori(onesplit)",
            "ori(devfund) != ori(strategist)",
            "ori(governance) != msg.sender",
            "ori(governance) != ori(treasury)",
            "ori(governance) != ori(timelock)",
            "ori(governance) != _timelock",
            "ori(governance) != ori(onesplit)",
            "ori(governance) != ori(strategist)",
            "msg.sender != ori(treasury)",
            "msg.sender == ori(timelock)",
            "msg.sender != _timelock",
            "msg.sender != ori(onesplit)",
            "msg.sender != ori(strategist)",
            "msg.value <= ori(convenienceFee)",
            "msg.value < ori(convenienceFee)",
            "msg.value != ori(convenienceFee)",
            "msg.value <= ori(split)",
            "msg.value < ori(split)",
            "msg.value != ori(split)",
            "ori(treasury) != ori(timelock)",
            "ori(treasury) != _timelock",
            "ori(treasury) != ori(onesplit)",
            "ori(treasury) != ori(strategist)",
            "ori(timelock) != _timelock",
            "ori(timelock) != ori(onesplit)",
            "ori(timelock) != ori(strategist)",
            "ori(convenienceFee) <= ori(split)",
            "ori(convenienceFee) < ori(split)",
            "ori(convenienceFee) != ori(split)",
            "_timelock != ori(onesplit)",
            "_timelock != ori(strategist)",
            "ori(onesplit) != ori(strategist)"
        ],
        "postconditions": [
            "onesplit != 0",
            "devfund != 0",
            "strategist != 0",
            "convenienceFee > 0",
            "convenienceFee == 100",
            "convenienceFee one of [100]",
            "split > 0",
            "split == 500",
            "split one of [500]",
            "timelock != 0",
            "governance != 0",
            "treasury != 0",
            "onesplit != ori(devfund)",
            "onesplit != devfund",
            "onesplit != ori(governance)",
            "onesplit != msg.sender",
            "onesplit != ori(treasury)",
            "onesplit != ori(timelock)",
            "onesplit != _timelock",
            "onesplit != strategist",
            "onesplit == ori(onesplit)",
            "onesplit != timelock",
            "onesplit != governance",
            "onesplit != treasury",
            "onesplit != ori(strategist)",
            "ori(devfund) == devfund",
            "ori(devfund) != strategist",
            "ori(devfund) != timelock",
            "ori(devfund) == governance",
            "ori(devfund) != treasury",
            "devfund == ori(governance)",
            "devfund != msg.sender",
            "devfund != ori(treasury)",
            "devfund != ori(timelock)",
            "devfund != _timelock",
            "devfund != strategist",
            "devfund != ori(onesplit)",
            "devfund != timelock",
            "devfund == governance",
            "devfund != treasury",
            "devfund != ori(strategist)",
            "ori(governance) != strategist",
            "ori(governance) != timelock",
            "ori(governance) == governance",
            "ori(governance) != treasury",
            "msg.sender != strategist",
            "msg.sender != timelock",
            "msg.sender != governance",
            "msg.sender != treasury",
            "msg.value <= convenienceFee",
            "msg.value < convenienceFee",
            "msg.value != convenienceFee",
            "msg.value <= split",
            "msg.value < split",
            "msg.value != split",
            "ori(treasury) != strategist",
            "ori(treasury) != timelock",
            "ori(treasury) != governance",
            "ori(treasury) == treasury",
            "ori(timelock) != strategist",
            "ori(timelock) != timelock",
            "ori(timelock) != governance",
            "ori(timelock) != treasury",
            "ori(convenienceFee) == convenienceFee",
            "ori(convenienceFee) >= convenienceFee",
            "ori(convenienceFee) <= convenienceFee",
            "ori(convenienceFee) <= split",
            "ori(convenienceFee) < split",
            "ori(convenienceFee) != split",
            "_timelock != strategist",
            "_timelock == timelock",
            "_timelock != governance",
            "_timelock != treasury",
            "strategist != ori(onesplit)",
            "strategist != timelock",
            "strategist != governance",
            "strategist != treasury",
            "strategist == ori(strategist)",
            "convenienceFee <= split",
            "convenienceFee < split",
            "convenienceFee != split",
            "convenienceFee <= ori(split)",
            "convenienceFee < ori(split)",
            "convenienceFee != ori(split)",
            "ori(onesplit) != timelock",
            "ori(onesplit) != governance",
            "ori(onesplit) != treasury",
            "split == ori(split)",
            "split >= ori(split)",
            "split <= ori(split)",
            "timelock != governance",
            "timelock != treasury",
            "timelock != ori(strategist)",
            "governance != treasury",
            "governance != ori(strategist)",
            "treasury != ori(strategist)"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setTimelock(_timelock)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setTreasury(_treasury)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setTreasury(_treasury)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "swapExactJarForJar(_fromJar,_toJar,_fromJarAmount,_toJarMinAmount,_targets,_data)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "swapExactJarForJar(_fromJar,_toJar,_fromJarAmount,_toJarMinAmount,_targets,_data)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "withdraw(_token,_amount)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "withdraw(_token,_amount)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "withdrawAll(_token)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "withdrawAll(_token)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "yearn(_strategy,_token,parts)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "yearn(_strategy,_token,parts)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": null,
        "type": "PptType.CONTRACT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "ori(devfund) != 0",
            "ori(governance) != 0",
            "ori(treasury) != 0",
            "ori(convenienceFee) > 0",
            "ori(convenienceFee) == 100",
            "ori(convenienceFee) one of [100]",
            "ori(timelock) != 0",
            "ori(onesplit) != 0",
            "ori(strategist) != 0",
            "ori(split) > 0",
            "ori(split) == 500",
            "ori(split) one of [500]",
            "ori(devfund) != ori(treasury)",
            "ori(devfund) != ori(timelock)",
            "ori(devfund) != ori(onesplit)",
            "ori(devfund) != ori(strategist)",
            "ori(governance) != ori(treasury)",
            "ori(governance) != ori(onesplit)",
            "ori(governance) != ori(strategist)",
            "ori(treasury) != ori(timelock)",
            "ori(treasury) != ori(onesplit)",
            "ori(treasury) != ori(strategist)",
            "ori(convenienceFee) <= ori(split)",
            "ori(convenienceFee) < ori(split)",
            "ori(convenienceFee) != ori(split)",
            "ori(timelock) != ori(onesplit)",
            "ori(timelock) != ori(strategist)",
            "ori(onesplit) != ori(strategist)"
        ],
        "postconditions": [
            "onesplit != 0",
            "devfund != 0",
            "strategist != 0",
            "convenienceFee > 0",
            "convenienceFee == 100",
            "convenienceFee one of [100]",
            "split > 0",
            "split == 500",
            "split one of [500]",
            "timelock != 0",
            "governance != 0",
            "treasury != 0",
            "onesplit != ori(devfund)",
            "onesplit != devfund",
            "onesplit != ori(governance)",
            "onesplit != ori(treasury)",
            "onesplit != ori(timelock)",
            "onesplit != strategist",
            "onesplit == ori(onesplit)",
            "onesplit != timelock",
            "onesplit != governance",
            "onesplit != treasury",
            "onesplit != ori(strategist)",
            "ori(devfund) == devfund",
            "ori(devfund) != strategist",
            "ori(devfund) != timelock",
            "ori(devfund) != treasury",
            "devfund != ori(treasury)",
            "devfund != ori(timelock)",
            "devfund != strategist",
            "devfund != ori(onesplit)",
            "devfund != timelock",
            "devfund != treasury",
            "devfund != ori(strategist)",
            "ori(governance) != strategist",
            "ori(governance) != treasury",
            "ori(treasury) != strategist",
            "ori(treasury) != timelock",
            "ori(treasury) != governance",
            "ori(treasury) == treasury",
            "ori(convenienceFee) == convenienceFee",
            "ori(convenienceFee) >= convenienceFee",
            "ori(convenienceFee) <= convenienceFee",
            "ori(convenienceFee) <= split",
            "ori(convenienceFee) < split",
            "ori(convenienceFee) != split",
            "ori(timelock) != strategist",
            "ori(timelock) != treasury",
            "strategist != ori(onesplit)",
            "strategist != timelock",
            "strategist != governance",
            "strategist != treasury",
            "strategist == ori(strategist)",
            "convenienceFee <= split",
            "convenienceFee < split",
            "convenienceFee != split",
            "convenienceFee <= ori(split)",
            "convenienceFee < ori(split)",
            "convenienceFee != ori(split)",
            "ori(onesplit) != timelock",
            "ori(onesplit) != governance",
            "ori(onesplit) != treasury",
            "split == ori(split)",
            "split >= ori(split)",
            "split <= ori(split)",
            "timelock != treasury",
            "timelock != ori(strategist)",
            "governance != treasury",
            "governance != ori(strategist)",
            "treasury != ori(strategist)"
        ],
        "falsified_preconditions": [
            "ori(devfund) != ori(governance)",
            "ori(governance) == ori(timelock)"
        ],
        "falsified_postconditions": [
            "ori(devfund) != governance",
            "devfund != ori(governance)",
            "devfund != governance",
            "ori(governance) == timelock",
            "ori(governance) == governance",
            "ori(timelock) == timelock",
            "ori(timelock) == governance",
            "timelock == governance"
        ]
    }
]